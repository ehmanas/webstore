{"ast":null,"code":"import _classCallCheck from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authentication/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport var HttpErrorInterceptor = /*#__PURE__*/(function () {\n  var HttpErrorInterceptor = /*#__PURE__*/function () {\n    function HttpErrorInterceptor(auth, router) {\n      _classCallCheck(this, HttpErrorInterceptor);\n\n      this.auth = auth;\n      this.router = router;\n    }\n\n    _createClass(HttpErrorInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(request, next) {\n        var _this = this;\n\n        return next.handle(request).pipe(retry(1), catchError(function (error) {\n          var errorMessage = '';\n\n          if (error.error instanceof ErrorEvent) {\n            // client-side error\n            errorMessage = \"Error: \".concat(error.error.message);\n          } else {\n            // server-side error\n            errorMessage = \"Error Code: \".concat(error.status, \"\\nMessage: \").concat(error.message);\n\n            if (error.status === 401) {\n              _this.auth.logout();\n\n              _this.router.navigate(['/signup']);\n\n              return throwError(errorMessage);\n            }\n          }\n\n          _this.auth.showAlert({\n            type: 'danger',\n            msg: error.error.message\n          });\n\n          return throwError(errorMessage);\n        }));\n      }\n    }]);\n\n    return HttpErrorInterceptor;\n  }();\n\n  HttpErrorInterceptor.ɵfac = function HttpErrorInterceptor_Factory(t) {\n    return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  HttpErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptor,\n    factory: HttpErrorInterceptor.ɵfac\n  });\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}