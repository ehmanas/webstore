{"ast":null,"code":"import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport let ValidationService = /*#__PURE__*/(() => {\n  class ValidationService {\n    constructor() {}\n\n    static getValidatorErrorMessage(validatorName, validatorValue) {\n      const config = {\n        required: 'Mandatory',\n        invalidEmailAddress: 'Email address not valid',\n        invalidPassword: 'At least 6 characters with 1 number',\n        minlength: `Min value ${validatorValue.requiredLength} characters`,\n        maxlength: `Max value ${validatorValue.requiredLength} characters`,\n        invalidOldPassword: 'Old password not valid',\n        notmatchPasswords: 'Password and Confirm Password do not match',\n        emailExists: 'Email already exists'\n      };\n      return config[validatorName];\n    }\n\n    static emailValidator(control) {\n      // RFC 2822 compliant regex\n      // eslint-disable-next-line max-len\n      if (control.value && control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n        return null;\n      } else {\n        return {\n          invalidEmailAddress: true\n        };\n      }\n    }\n\n    static emptyValidator(control) {\n      // RFC 2822 compliant regex\n      if (control.value && control.value.trim().length > 0) {\n        return null;\n      } else {\n        return {\n          required: true\n        };\n      }\n    }\n\n    static passwordValidator(control) {\n      // {6,100}           - Assert password is between 6 and 100 characters\n      // (?=.*[0-9])       - Assert a string has at least one number\n      if (control.value && control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n        return null;\n      } else {\n        return {\n          invalidPassword: true\n        };\n      }\n    }\n\n    static matchingPasswords(control) {\n      if (control) {\n        let passwordInput = control.get('password');\n\n        if (!passwordInput) {\n          passwordInput = control.get('newPassword');\n        }\n\n        const passwordConfirmationInput = control.get('confirmPassword');\n\n        if (passwordInput && passwordConfirmationInput && passwordInput.value !== passwordConfirmationInput.value) {\n          passwordConfirmationInput.setErrors({\n            notmatchPasswords: true\n          });\n          return {\n            notmatchPasswords: true\n          };\n        } else {\n          return null;\n        }\n      }\n\n      return null;\n    }\n\n  }\n\n  ValidationService.ɵfac = function ValidationService_Factory(t) {\n    return new (t || ValidationService)();\n  };\n\n  ValidationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidationService,\n    factory: ValidationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ValidationService;\n})();","map":null,"metadata":{},"sourceType":"module"}