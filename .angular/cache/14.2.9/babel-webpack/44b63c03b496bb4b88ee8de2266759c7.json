{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { Subject } from 'rxjs';\nimport { HEADERS, Library, OPTIONS } from '../library';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.decodedTokenSource = new Subject();\n      this.decodedToken$ = this.decodedTokenSource.asObservable();\n      this.jwtHelper = new JwtHelperService();\n      this.alertSource = new Subject();\n      this.alert$ = this.alertSource.asObservable();\n      this.logoutSource = new Subject();\n      this.logout$ = this.logoutSource.asObservable();\n      this.loggedIn = false;\n      this.name = '';\n    }\n\n    login(username, password, redirectTo) {\n      this.http.post(Library.apiEndpoint + 'auth/login', {\n        username,\n        password\n      }, OPTIONS).subscribe(response => {\n        this.loggedIn = true;\n        localStorage.setItem('jwt', response.token);\n        this.onDecodedToken(response.token);\n        this.showAlert({\n          type: 'success',\n          msg: 'Welcome ' + this.decodedToken.name\n        });\n        this.router.navigateByUrl('/' + redirectTo);\n      }, error => {\n        this.loggedIn = false;\n        this.router.navigateByUrl('/signup');\n        this.decodedToken = null;\n        this.showAlert({\n          type: 'warning',\n          msg: 'Credentials are wrong'\n        });\n      });\n    }\n\n    signup(account, redirectTo) {\n      delete account.confirmPassword;\n      this.http.post(Library.apiEndpoint + 'account/signup', account, OPTIONS).subscribe(response => {\n        this.loggedIn = true;\n        localStorage.setItem('jwt', response.token);\n        this.onDecodedToken(response.token);\n        this.showAlert({\n          type: 'success',\n          msg: 'Welcome ' + this.decodedToken.name\n        });\n        this.router.navigateByUrl('/' + redirectTo);\n      }, error => {\n        this.loggedIn = false;\n        this.router.navigateByUrl('/auth');\n        this.decodedToken = null;\n      });\n    }\n\n    forgotPassword(email) {\n      return this.http.post(Library.apiEndpoint + 'login/password/forgot', {\n        token: email\n      }, OPTIONS);\n    }\n\n    changePassword(login) {\n      return this.http.post(Library.apiEndpoint + 'login/password/change', login, {\n        headers: HEADERS,\n        observe: 'response'\n      });\n    }\n\n    updateToken(tokenJson) {\n      localStorage.setItem('jwt', tokenJson.token);\n      this.onDecodedToken(tokenJson.token);\n    }\n\n    testIsAuthenticated() {\n      const jwt = localStorage.getItem('jwt');\n\n      if (jwt) {\n        this.onDecodedToken(jwt);\n        this.loggedIn = true;\n      }\n    }\n\n    isAuthenticated() {\n      return this.loggedIn;\n    }\n\n    getName() {\n      return this.name;\n    }\n\n    getToken() {\n      return localStorage.getItem('jwt');\n    }\n\n    onDecodedToken(token) {\n      try {\n        this.decodedToken = token ? this.jwtHelper.decodeToken(token) : this.decodedToken = null;\n        this.name = this.decodedToken.name;\n        this.decodedTokenSource.next(this.decodedToken);\n      } catch (e) {\n        this.logout();\n        this.router.navigateByUrl('/auth');\n      }\n    }\n\n    logout() {\n      this.loggedIn = false;\n      this.decodedToken = null;\n      localStorage.removeItem('jwt');\n      this.logoutSource.next(true);\n    }\n\n    showAlert(alert) {\n      this.alertSource.next(alert);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}