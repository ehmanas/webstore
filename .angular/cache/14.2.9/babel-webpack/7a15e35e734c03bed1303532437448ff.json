{"ast":null,"code":"import _classCallCheck from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Library, OPTIONS } from 'src/app/core/library';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var DBValidator = /*#__PURE__*/(function () {\n  var DBValidator = /*#__PURE__*/function () {\n    function DBValidator(http) {\n      _classCallCheck(this, DBValidator);\n\n      this.http = http;\n    }\n\n    _createClass(DBValidator, [{\n      key: \"asyncValidator\",\n      value: function asyncValidator(control) {\n        var _this = this;\n\n        var p = new Promise(function (resolve) {\n          _this.http.post(Library.apiEndpoint + 'common/lookup/email', JSON.stringify({\n            token: control.value\n          }), OPTIONS).subscribe(function (response) {\n            if (response.text() === 'true') {\n              resolve(null);\n            } else {\n              resolve({\n                emailExists: true\n              });\n            } // return null;\n\n          });\n        });\n        return p;\n      }\n    }, {\n      key: \"emailExists\",\n      value: function emailExists(value) {\n        var _this2 = this;\n\n        return new Promise(function (resolve) {\n          _this2.http.post(Library.apiEndpoint + 'common/lookup/email', {\n            token: value\n          }, OPTIONS).subscribe(function (response) {\n            if (response === true) {\n              resolve(null);\n            } else {\n              resolve({\n                emailExists: true\n              });\n            }\n          });\n        });\n      }\n    }, {\n      key: \"emailNotExists\",\n      value: function emailNotExists(value) {\n        var _this3 = this;\n\n        return new Promise(function (resolve) {\n          _this3.http.post(Library.apiEndpoint + 'common/lookup/email', {\n            token: value\n          }, OPTIONS).subscribe(function (response) {\n            if (response === true) {\n              resolve({\n                emailNotExists: true\n              });\n            } else {\n              resolve(null);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"valueAndEmailExists\",\n      value: function valueAndEmailExists(value, value2, accountEvent) {\n        var _this4 = this;\n\n        var oldValue;\n        var oldEmail;\n        new Promise(function (resolve) {\n          accountEvent.subscribe(function (data) {\n            resolve(data);\n          });\n        }).then(function (data) {\n          oldValue = data.value;\n          oldEmail = data.email;\n        });\n        return function (group) {\n          var input = group.controls[value];\n          var input2 = group.controls[value2];\n\n          if (input && oldEmail && input.value && input.value !== oldEmail) {\n            _this4.http.post(Library.apiEndpoint + 'common/lookup/email', {\n              token: input.value\n            }, OPTIONS).subscribe(function (isValid) {\n              if (isValid) {} else {\n                input.setErrors({\n                  emailExists: true\n                });\n              }\n            });\n          }\n\n          if (input2 && oldEmail && input2.value && input2.value !== oldValue) {\n            _this4.http.post(Library.apiEndpoint + 'common/lookup/username', {\n              token: input2.value\n            }, OPTIONS).subscribe(function (isValid) {\n              if (isValid) {} else {\n                input2.setErrors({\n                  valueExists: true\n                });\n              }\n            });\n          }\n        };\n      }\n    }, {\n      key: \"valueExists\",\n      value: function valueExists(control) {\n        var _this5 = this;\n\n        return new Promise(function (resolve) {\n          _this5.http.post(Library.apiEndpoint + 'common/lookup/username', JSON.stringify({\n            token: control.value\n          }), OPTIONS).subscribe(function (response) {\n            if (response.text() === 'true') {// resolve(null);\n            } else {\n              control.setErrors({\n                valueExists: true\n              }); // resolve({'valueExists': true});\n            } // return null;\n\n          });\n        });\n      }\n    }], [{\n      key: \"isPresent\",\n      value: function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n      }\n    }]);\n\n    return DBValidator;\n  }();\n\n  DBValidator.ɵfac = function DBValidator_Factory(t) {\n    return new (t || DBValidator)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DBValidator.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DBValidator,\n    factory: DBValidator.ɵfac,\n    providedIn: 'root'\n  });\n  return DBValidator;\n})();","map":null,"metadata":{},"sourceType":"module"}