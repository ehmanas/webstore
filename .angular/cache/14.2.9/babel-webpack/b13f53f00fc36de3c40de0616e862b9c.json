{"ast":null,"code":"import { Library, OPTIONS } from 'src/app/core/library';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DBValidator = /*#__PURE__*/(() => {\n  class DBValidator {\n    constructor(http) {\n      this.http = http;\n    }\n\n    static isPresent(obj) {\n      return obj !== undefined && obj !== null;\n    }\n\n    asyncValidator(control) {\n      const p = new Promise(resolve => {\n        this.http.post(Library.apiEndpoint + 'common/lookup/email', JSON.stringify({\n          token: control.value\n        }), OPTIONS).subscribe(response => {\n          if (response.text() === 'true') {\n            resolve(null);\n          } else {\n            resolve({\n              emailExists: true\n            });\n          } // return null;\n\n        });\n      });\n      return p;\n    }\n\n    emailExists(value) {\n      return new Promise(resolve => {\n        this.http.post(Library.apiEndpoint + 'common/lookup/email', {\n          token: value\n        }, OPTIONS).subscribe(response => {\n          if (response === true) {\n            resolve(null);\n          } else {\n            resolve({\n              emailExists: true\n            });\n          }\n        });\n      });\n    }\n\n    emailNotExists(value) {\n      return new Promise(resolve => {\n        this.http.post(Library.apiEndpoint + 'common/lookup/email', {\n          token: value\n        }, OPTIONS).subscribe(response => {\n          if (response === true) {\n            resolve({\n              emailNotExists: true\n            });\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n\n    valueAndEmailExists(value, value2, accountEvent) {\n      let oldValue;\n      let oldEmail;\n      new Promise(resolve => {\n        accountEvent.subscribe(data => {\n          resolve(data);\n        });\n      }).then(data => {\n        oldValue = data.value;\n        oldEmail = data.email;\n      });\n      return group => {\n        const input = group.controls[value];\n        const input2 = group.controls[value2];\n\n        if (input && oldEmail && input.value && input.value !== oldEmail) {\n          this.http.post(Library.apiEndpoint + 'common/lookup/email', {\n            token: input.value\n          }, OPTIONS).subscribe(isValid => {\n            if (isValid) {} else {\n              input.setErrors({\n                emailExists: true\n              });\n            }\n          });\n        }\n\n        if (input2 && oldEmail && input2.value && input2.value !== oldValue) {\n          this.http.post(Library.apiEndpoint + 'common/lookup/username', {\n            token: input2.value\n          }, OPTIONS).subscribe(isValid => {\n            if (isValid) {} else {\n              input2.setErrors({\n                valueExists: true\n              });\n            }\n          });\n        }\n      };\n    }\n\n    valueExists(control) {\n      return new Promise(resolve => {\n        this.http.post(Library.apiEndpoint + 'common/lookup/username', JSON.stringify({\n          token: control.value\n        }), OPTIONS).subscribe(response => {\n          if (response.text() === 'true') {// resolve(null);\n          } else {\n            control.setErrors({\n              valueExists: true\n            }); // resolve({'valueExists': true});\n          } // return null;\n\n        });\n      });\n    }\n\n  }\n\n  DBValidator.ɵfac = function DBValidator_Factory(t) {\n    return new (t || DBValidator)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DBValidator.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DBValidator,\n    factory: DBValidator.ɵfac,\n    providedIn: 'root'\n  });\n  return DBValidator;\n})();","map":null,"metadata":{},"sourceType":"module"}