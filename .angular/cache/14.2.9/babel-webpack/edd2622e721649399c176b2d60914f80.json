{"ast":null,"code":"import _classCallCheck from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport var ValidationService = /*#__PURE__*/(function () {\n  var ValidationService = /*#__PURE__*/function () {\n    function ValidationService() {\n      _classCallCheck(this, ValidationService);\n    }\n\n    _createClass(ValidationService, null, [{\n      key: \"getValidatorErrorMessage\",\n      value: function getValidatorErrorMessage(validatorName, validatorValue) {\n        var config = {\n          required: 'Mandatory',\n          invalidEmailAddress: 'Email address not valid',\n          invalidPassword: 'At least 6 characters with 1 number',\n          minlength: \"Min value \".concat(validatorValue.requiredLength, \" characters\"),\n          maxlength: \"Max value \".concat(validatorValue.requiredLength, \" characters\"),\n          invalidOldPassword: 'Old password not valid',\n          notmatchPasswords: 'Password and Confirm Password do not match',\n          emailExists: 'Email already exists'\n        };\n        return config[validatorName];\n      }\n    }, {\n      key: \"emailValidator\",\n      value: function emailValidator(control) {\n        // RFC 2822 compliant regex\n        // eslint-disable-next-line max-len\n        if (control.value && control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\n          return null;\n        } else {\n          return {\n            invalidEmailAddress: true\n          };\n        }\n      }\n    }, {\n      key: \"emptyValidator\",\n      value: function emptyValidator(control) {\n        // RFC 2822 compliant regex\n        if (control.value && control.value.trim().length > 0) {\n          return null;\n        } else {\n          return {\n            required: true\n          };\n        }\n      }\n    }, {\n      key: \"passwordValidator\",\n      value: function passwordValidator(control) {\n        // {6,100}           - Assert password is between 6 and 100 characters\n        // (?=.*[0-9])       - Assert a string has at least one number\n        if (control.value && control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\n          return null;\n        } else {\n          return {\n            invalidPassword: true\n          };\n        }\n      }\n    }, {\n      key: \"matchingPasswords\",\n      value: function matchingPasswords(control) {\n        if (control) {\n          var passwordInput = control.get('password');\n\n          if (!passwordInput) {\n            passwordInput = control.get('newPassword');\n          }\n\n          var passwordConfirmationInput = control.get('confirmPassword');\n\n          if (passwordInput && passwordConfirmationInput && passwordInput.value !== passwordConfirmationInput.value) {\n            passwordConfirmationInput.setErrors({\n              notmatchPasswords: true\n            });\n            return {\n              notmatchPasswords: true\n            };\n          } else {\n            return null;\n          }\n        }\n\n        return null;\n      }\n    }]);\n\n    return ValidationService;\n  }();\n\n  ValidationService.ɵfac = function ValidationService_Factory(t) {\n    return new (t || ValidationService)();\n  };\n\n  ValidationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidationService,\n    factory: ValidationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ValidationService;\n})();","map":null,"metadata":{},"sourceType":"module"}