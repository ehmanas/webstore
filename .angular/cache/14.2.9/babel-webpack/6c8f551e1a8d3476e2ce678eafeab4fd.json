{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Library } from '../library';\nimport * as i0 from \"@angular/core\";\nexport let LocalStorageService = /*#__PURE__*/(() => {\n  class LocalStorageService {\n    constructor(platformId) {\n      this.platformId = platformId; //   this.isNode = typeof module !== 'undefined'\n\n      this.isNode = isPlatformServer(this.platformId);\n    }\n\n    save(name, data) {\n      if (this.isNode) {\n        return;\n      }\n\n      const localDataString = localStorage.getItem(Library.storageKey);\n      let localData;\n\n      if (localDataString) {\n        localData = JSON.parse(localDataString);\n      } else {\n        localData = {};\n      }\n\n      localData[name] = data;\n      localStorage.setItem(Library.storageKey, JSON.stringify(localData));\n    }\n\n    get(name) {\n      if (this.isNode) {\n        return;\n      }\n\n      const data = JSON.parse(localStorage.getItem(Library.storageKey));\n\n      if (!data) {\n        return undefined;\n      }\n\n      if (name) {\n        if (data[name]) {\n          return data[name];\n        } else {\n          return {};\n        }\n      }\n\n      return data;\n    }\n\n  }\n\n  LocalStorageService.ɵfac = function LocalStorageService_Factory(t) {\n    return new (t || LocalStorageService)(i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  LocalStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocalStorageService,\n    factory: LocalStorageService.ɵfac\n  });\n  return LocalStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}