{"ast":null,"code":"import { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authentication/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(retry(1), catchError(error => {\n        let errorMessage = '';\n\n        if (error.error instanceof ErrorEvent) {\n          // client-side error\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // server-side error\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n\n          if (error.status === 401) {\n            this.auth.logout();\n            this.router.navigate(['/signup']);\n            return throwError(errorMessage);\n          }\n        }\n\n        this.auth.showAlert({\n          type: 'danger',\n          msg: error.error.message\n        });\n        return throwError(errorMessage);\n      }));\n    }\n\n  }\n\n  HttpErrorInterceptor.ɵfac = function HttpErrorInterceptor_Factory(t) {\n    return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  HttpErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptor,\n    factory: HttpErrorInterceptor.ɵfac\n  });\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}