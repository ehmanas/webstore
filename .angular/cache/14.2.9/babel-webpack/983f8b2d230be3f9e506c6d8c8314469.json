{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../authentication/auth.service\";\nimport * as i3 from \"./cart.service\";\nimport * as i4 from \"./private.service\";\nexport let CheckoutService = /*#__PURE__*/(() => {\n  class CheckoutService {\n    constructor(router, authService, cartService, privateService) {\n      this.router = router;\n      this.authService = authService;\n      this.cartService = cartService;\n      this.privateService = privateService;\n      this.shipAddress = {};\n      this.billAddress = {};\n      this.shipper = {};\n      this.order = {};\n      this.orderSource = new Subject();\n      this.order$ = this.orderSource.asObservable();\n    }\n\n    payOrder(order) {\n      this.privateService.getOrder(order.id).subscribe(ord => {\n        this.cartService.clearCart();\n        ord.lines.forEach((item, index) => {\n          this.cartService.getCart().push(item);\n          this.cartService.synchronize(item);\n        });\n        this.order = ord;\n        this.orderSource.next(ord);\n        this.shipAddress = ord.shipAddress;\n        this.billAddress = ord.billAddress;\n        this.shipper = ord.shipper;\n        this.router.navigate(['/checkout/checkout4']);\n      });\n    }\n\n    voidCurrentOrder() {\n      this.privateService.voidOrder(this.order);\n      this.order = {};\n    }\n\n    voidOrder(order) {\n      this.privateService.voidOrder(order).subscribe(resp => {\n        if (resp.status === 200) {\n          order.docStatus = 'VO';\n        }\n      });\n    }\n\n    clear() {\n      this.order = {};\n      this.shipAddress = {};\n      this.billAddress = {};\n      this.shipper = {};\n    }\n\n    setShipAddress(address) {\n      this.shipAddress = address;\n    }\n\n    setBillAddress(address) {\n      this.billAddress = address;\n    }\n\n    setShipper(shipper) {\n      this.shipper = shipper;\n    }\n\n    getTotalPrice() {\n      if (this.order.id) {\n        return this.order.grandTotal;\n      }\n\n      let price = this.cartService.getTotalPrice();\n\n      if (this.shipper.id) {\n        price = price + this.shipper.price;\n      }\n\n      return price;\n    }\n\n    createOrder() {\n      this.order = {};\n      this.order.shipAddress = this.shipAddress;\n      this.order.billAddress = this.billAddress;\n      this.order.shipper = this.shipper;\n      this.order.lines = this.cartService.getCart();\n      /*\n      this.privateService.getOrder(1000000).subscribe(\n       (order : Order) => {\n       this.order = order;\n       console.log('HERE: '+order)\n       this.orderSource.next(order);\n       this.authService.showAlert({type: 'success', msg: 'Order '+order.documentNo+' is generated'});\n      });\n      */\n\n      this.privateService.createOrder(this.order).subscribe(order => {\n        this.order = order;\n        this.orderSource.next(order);\n        this.authService.showAlert({\n          type: 'success',\n          msg: 'Order ' + order.documentNo + ' is generated'\n        });\n      });\n    }\n\n  }\n\n  CheckoutService.ɵfac = function CheckoutService_Factory(t) {\n    return new (t || CheckoutService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.CartService), i0.ɵɵinject(i4.PrivateService));\n  };\n\n  CheckoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CheckoutService,\n    factory: CheckoutService.ɵfac,\n    providedIn: 'root'\n  });\n  return CheckoutService;\n})();","map":null,"metadata":{},"sourceType":"module"}