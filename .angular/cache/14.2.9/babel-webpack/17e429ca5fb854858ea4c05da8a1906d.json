{"ast":null,"code":"import _classCallCheck from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macspok/projects/idempiere-projects/webstore/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Subject } from 'rxjs';\nimport { HEADERS, Library, OPTIONS } from '../library';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(http, router) {\n      _classCallCheck(this, AuthService);\n\n      this.http = http;\n      this.router = router;\n      this.decodedTokenSource = new Subject();\n      this.decodedToken$ = this.decodedTokenSource.asObservable();\n      this.jwtHelper = new JwtHelperService();\n      this.alertSource = new Subject();\n      this.alert$ = this.alertSource.asObservable();\n      this.logoutSource = new Subject();\n      this.logout$ = this.logoutSource.asObservable();\n      this.loggedIn = false;\n      this.name = '';\n    }\n\n    _createClass(AuthService, [{\n      key: \"login\",\n      value: function login(username, password, redirectTo) {\n        var _this = this;\n\n        this.http.post(Library.apiEndpoint + 'auth/login', {\n          username: username,\n          password: password\n        }, OPTIONS).subscribe(function (response) {\n          _this.loggedIn = true;\n          localStorage.setItem('jwt', response.token);\n\n          _this.onDecodedToken(response.token);\n\n          _this.showAlert({\n            type: 'success',\n            msg: 'Welcome ' + _this.decodedToken.name\n          });\n\n          _this.router.navigateByUrl('/' + redirectTo);\n        }, function (error) {\n          _this.loggedIn = false;\n\n          _this.router.navigateByUrl('/signup');\n\n          _this.decodedToken = null;\n\n          _this.showAlert({\n            type: 'warning',\n            msg: 'Credentials are wrong'\n          });\n        });\n      }\n    }, {\n      key: \"signup\",\n      value: function signup(account, redirectTo) {\n        var _this2 = this;\n\n        delete account.confirmPassword;\n        this.http.post(Library.apiEndpoint + 'account/signup', account, OPTIONS).subscribe(function (response) {\n          _this2.loggedIn = true;\n          localStorage.setItem('jwt', response.token);\n\n          _this2.onDecodedToken(response.token);\n\n          _this2.showAlert({\n            type: 'success',\n            msg: 'Welcome ' + _this2.decodedToken.name\n          });\n\n          _this2.router.navigateByUrl('/' + redirectTo);\n        }, function (error) {\n          _this2.loggedIn = false;\n\n          _this2.router.navigateByUrl('/auth');\n\n          _this2.decodedToken = null;\n        });\n      }\n    }, {\n      key: \"forgotPassword\",\n      value: function forgotPassword(email) {\n        return this.http.post(Library.apiEndpoint + 'login/password/forgot', {\n          token: email\n        }, OPTIONS);\n      }\n    }, {\n      key: \"changePassword\",\n      value: function changePassword(login) {\n        return this.http.post(Library.apiEndpoint + 'login/password/change', login, {\n          headers: HEADERS,\n          observe: 'response'\n        });\n      }\n    }, {\n      key: \"updateToken\",\n      value: function updateToken(tokenJson) {\n        localStorage.setItem('jwt', tokenJson.token);\n        this.onDecodedToken(tokenJson.token);\n      }\n    }, {\n      key: \"testIsAuthenticated\",\n      value: function testIsAuthenticated() {\n        var jwt = localStorage.getItem('jwt');\n\n        if (jwt) {\n          this.onDecodedToken(jwt);\n          this.loggedIn = true;\n        }\n      }\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        return this.loggedIn;\n      }\n    }, {\n      key: \"getName\",\n      value: function getName() {\n        return this.name;\n      }\n    }, {\n      key: \"getToken\",\n      value: function getToken() {\n        return localStorage.getItem('jwt');\n      }\n    }, {\n      key: \"onDecodedToken\",\n      value: function onDecodedToken(token) {\n        try {\n          this.decodedToken = token ? this.jwtHelper.decodeToken(token) : this.decodedToken = null;\n          this.name = this.decodedToken.name;\n          this.decodedTokenSource.next(this.decodedToken);\n        } catch (e) {\n          this.logout();\n          this.router.navigateByUrl('/auth');\n        }\n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        this.loggedIn = false;\n        this.decodedToken = null;\n        localStorage.removeItem('jwt');\n        this.logoutSource.next(true);\n      }\n    }, {\n      key: \"showAlert\",\n      value: function showAlert(alert) {\n        this.alertSource.next(alert);\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}