{"ast":null,"code":"import { HEADERS, Library, OPTIONS } from '../library';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PrivateService = /*#__PURE__*/(() => {\n  class PrivateService {\n    constructor(http) {\n      this.http = http;\n      this.addresses = [];\n    }\n\n    getOrders() {\n      return this.http.get(Library.apiEndpoint + 'account/orders', OPTIONS);\n    }\n\n    getOrder(id) {\n      return this.http.get(Library.apiEndpoint + 'account/order/' + id, OPTIONS);\n    }\n\n    createOrder(order) {\n      return this.http.post(Library.apiEndpoint + 'checkout/order/create', order, OPTIONS);\n    }\n\n    voidOrder(order) {\n      return this.http.post(Library.apiEndpoint + 'checkout/order/void', order, {\n        headers: HEADERS,\n        observe: 'response'\n      });\n    }\n\n    getAccount() {\n      return this.http.get(Library.apiEndpoint + 'account/info', OPTIONS);\n    }\n\n    payment(type, orderId) {\n      return this.http.post(Library.apiEndpoint + 'checkout/payment', {\n        type,\n        orderId\n      }, {\n        observe: 'response'\n      });\n    }\n\n    updateAccount(account) {\n      return this.http.post(Library.apiEndpoint + 'account/info/update', account, OPTIONS);\n    }\n\n    changePassword(passwordForm) {\n      return this.http.post(Library.apiEndpoint + 'account/password/change', passwordForm, OPTIONS);\n    }\n\n    getAddresses() {\n      return new Observable(observer => {\n        this.http.get(Library.apiEndpoint + 'account/addresses', OPTIONS).subscribe(data => {\n          this.addresses = data;\n          observer.next(this.addresses);\n          observer.complete();\n        });\n      });\n    }\n\n    getAddress(id) {\n      if (this.addresses) {\n        return this.addresses.filter(h => h.id === +id)[0];\n      } else {\n        return {};\n      }\n    }\n\n    createUpdateAddress(address) {\n      return this.http.post(Library.apiEndpoint + 'account/address/create_update', address, OPTIONS);\n    }\n\n    deleteAddress(address) {\n      return this.http.delete(Library.apiEndpoint + 'account/address/delete/' + address.id, {\n        headers: HEADERS,\n        observe: 'response'\n      });\n    }\n\n    getPdfFile(id, type) {\n      return this.http.get(Library.apiEndpoint + 'account/pdf/' + type + '/' + id, {\n        headers: HEADERS,\n        responseType: 'blob' // observe: 'response'\n\n      });\n    }\n\n  }\n\n  PrivateService.ɵfac = function PrivateService_Factory(t) {\n    return new (t || PrivateService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PrivateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PrivateService,\n    factory: PrivateService.ɵfac,\n    providedIn: 'root'\n  });\n  return PrivateService;\n})();","map":null,"metadata":{},"sourceType":"module"}